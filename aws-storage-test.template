{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Mappings": {
      "RegionMap": {
        "eu-central-1": {
          "AMI": "ami-04003319"
        },
        "sa-east-1": {
          "AMI": "ami-af9925b2"
        },
        "ap-northeast-1": {
          "AMI": "ami-18869819"
        },
        "eu-west-1": {
          "AMI": "ami-9d23aeea"
        },
        "us-east-1": {
          "AMI": "ami-146e2a7c"
        },
        "us-west-1": {
          "AMI": "ami-42908907"
        },
        "us-west-2": {
          "AMI": "ami-dfc39aef"
        },
        "ap-southeast-2": {
          "AMI": "ami-d50773ef"
        },
        "ap-southeast-1": {
          "AMI": "ami-96bb90c4"
        }
      }
    },
    "Parameters": {
      "InstanceType": {
        "Description": "Instance type",
        "Type": "String",
        "AllowedValues": ["m3.medium", "c3.2xlarge", "c3.8xlarge"],
        "Default": "m3.medium"
      },
      "KeyPairName": {
        "Description": "KeyPair Name",
        "Type": "String",
        "Default": ""
      },
      "AllowedIpPrefix": {
        "Description": "Allow connections to the VPC on all ports/protocols from this IP prefix.",
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      }
    },
    "Conditions": {
      "KeyPairIsEmptyString": {
        "Fn::Equals": [ { "Ref": "KeyPairName" }, "" ]
      }
    },
    "Resources": {
      "SecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "VPC Default Security Group",
          "SecurityGroupIngress": [
            {
              "IpProtocol": "-1",
              "CidrIp": { "Ref" : "AllowedIpPrefix" }
            }
          ]
        }
      },
      "WaitHandle" : {
        "Type" : "AWS::CloudFormation::WaitConditionHandle"
      },
      "WaitCondition" : {
        "Type" : "AWS::CloudFormation::WaitCondition",
        "DependsOn" : "Instance",
        "Properties" : {
          "Handle"  : { "Ref" : "WaitHandle" },
          "Timeout" : "600"
        }
      },
      "Instance": {
        "Type" : "AWS::EC2::Instance",
        "Properties": {

          "KeyName" : {
            "Fn::If" : [
              "KeyPairIsEmptyString",
              {"Ref" : "AWS::NoValue"},
              {"Ref" : "KeyPairName"}
            ]
          },

          "ImageId": { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AMI"] },
          "InstanceType": { "Ref": "InstanceType" },
          "SecurityGroups": [ { "Ref": "SecurityGroup" } ],
          "BlockDeviceMappings": [
            { "DeviceName" : "/dev/xvda", "Ebs" : { "VolumeSize" : "8", "VolumeType": "gp2" } },
            { "DeviceName" : "/dev/xvdf", "Ebs" : { "VolumeSize" : "200", "VolumeType": "gp2" } },
            { "DeviceName" : "/dev/xvdg", "Ebs" : { "VolumeSize" : "200", "VolumeType": "io1", "Iops": "4000" } },
            { "DeviceName" : "/dev/xvdh", "Ebs" : { "VolumeSize" : "200", "VolumeType": "standard" } }
          ],
          "UserData"       : {
            "Fn::Base64": {
              "Fn::Join": [
                "", [
                  "#!/bin/bash -ex\n",
                  "# Install CFN Init Helpers\n",
                  "/usr/bin/easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz \n",

                  "# Helper function\n",
                  "function error_exit\n",
                  "{\n",
                  "  /usr/bin/cfn-signal -e 1 -r \"$1\" ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  " \"", { "Ref" : "WaitHandle" }, "\" \n",
                  "  exit 1\n",
                  "}\n",

                  "# Process CloudFormation init definitions\n",
                  "/usr/bin/cfn-init -s ", { "Ref": "AWS::StackName" }, " -r Instance ",
                  "    --region ", { "Ref": "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

                  "# All is well so signal success\n",
                  "/usr/bin/cfn-signal -e 0 -r \"Stack setup complete\" ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --region ", { "Ref" : "AWS::Region" },
                  " \"", { "Ref" : "WaitHandle" }, "\" \n",

                  "#EOF"
                ]
              ]
            }
          }
        },
        "Metadata": {
          "AWS::CloudFormation::Init": {
            "configSets": {
              "default": ["enableRepos", "installHttpd", "perftest"]
            },
            "enableRepos": {
              "commands": {
                "001": {
                  "command": "yum-config-manager --enable epel"
                },
                "002": {
                  "command": "yum update -y"
                }
              }
            },
            "installHttpd": {
              "packages": {
                "yum": {
                  "httpd24": []
                }
              },
              "services" : {
                "sysvinit" : {
                  "httpd" : {
                    "enabled" : "true",
                    "ensureRunning" : "true"
                  }
                }
              }
            },
            "perftest": {
              "files": {
                "/root/perftest.sh": {
                  "content" : { "Fn::Join" : ["\n", [
                    "mkfs.ext4 /dev/xvdf",
                    "mkdir -p /perftest/gp2",
                    "mount /dev/xvdf /perftest/gp2",
                    "mkfs.ext4 /dev/xvdg",
                    "mkdir -p /perftest/io1",
                    "mount /dev/xvdg /perftest/io1",
                    "mkfs.ext4 /dev/xvdh",
                    "mkdir -p /perftest/standard",
                    "mount /dev/xvdh /perftest/standard",
                    "mb=1000",
                    "function run_test {",
                    "    cd /perftest/$test_name",
                    "    pwd",
                    "    seconds_elapsed=`/usr/bin/time -f \"%e\" bash -c \"dd if=/dev/zero of=testfile bs=1000000 count=$mb 2> /dev/null; sync\" 2>&1`",
                    "    mb_per_second=`echo \"scale=2; $mb / $seconds_elapsed\" | bc`",
                    "    echo \"$test_name: $mb MB in $seconds_elapsed seconds, $mb_per_second MB/s\" >> /var/www/html/perftest-results",
                    "}",
                    "ec2-metadata | egrep \"instance-type|placement\" >> /var/www/html/perftest-results",
                    "for test_name in standard gp2 io1",
                    "do",
                    "    run_test",
                    "done"
                  ]]}
                }
              },
              "commands": {
                "001": {
                  "command": "sh /root/perftest.sh"
                }
              }
            }
          }
        }
      }
    },
    "Outputs": {
      "TestResults" : {
        "Value" : {
          "Fn::Join" : [ "",
            [
              "http://",
              { "Fn::GetAtt" : [ "Instance", "PublicDnsName" ] },
              "/perftest-results"
            ]
          ]
        }
      },
      "PublicDnsName": {
        "Value": {
          "Fn::GetAtt" : [ "Instance", "PublicDnsName" ]
        }
      },
      "InstanceDetails" : {
        "Value" : {
          "Fn::Join" : [ "",
            [
              "https://console.aws.amazon.com/ec2/v2/home?region=",
              { "Ref" : "AWS::Region" },
              "#Instances:search=",
              { "Ref" : "Instance" }
            ]
          ]
        }
      }
    }
}
